// generator client {
//   provider = "prisma-client-js"
//   output   = "./generated"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("POSTGRES_URL")
// }

// model User {
//   id  String @id @default(uuid())
//   uid Int    @unique @default(autoincrement())

//   password String
//   email    String   @unique
//   role     RoleType @default(USER)

//   username           String?
//   status             String?
//   avatar             String?
//   iconSpecialization String? @map("icon_specialization")

//   tokens      Token[]
//   socialLinks SocialLink[]

//   specializationId String?         @map("specialization_id")
//   specialization   Specialization? @relation(fields: [specializationId], references: [id])

//   statusTeam StatusTeamType? @map("status_team")

//   candidateCard CandidateCard?
//   projects      Project[]
//   topics        Topic[]
//   comments      Comment[]
//   bookmarks     Bookmark[]
//   views         View[]

//   lastOpened UserLastOpened[] @relation("last_opened")

//   followers  Follow[] @relation(name: "followers")
//   followings Follow[] @relation(name: "followings")

//   // notifications        Notification[]
//   // notificationSettings NotificationSettings?

//   isVerified      Boolean @default(false) @map("is_verified")
//   isEmailVerified Boolean @default(false) @map("is_email_verified")

//   isDeactivated Boolean   @default(false) @map("is_deactivated")
//   deactivatedAt DateTime? @map("deactivated_at")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("users")
// }

// model CandidateCard {
//   id String @id @default(uuid())

//   direction     String
//   experience    String
//   description   String
//   portfolioUrls String[] @map("portfolio_urls")

//   hiddenUntil  DateTime? @map("hidden_until")
//   lastPromoted DateTime? @map("last_promoted")
//   isHidden     Boolean   @default(false) @map("is_hidden")

//   user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String? @map("user_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("candidate_cards")
// }

// model SocialLink {
//   id String @id @default(uuid())

//   title    String
//   url      String
//   position Int

//   user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String? @map("user_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("social_links")
// }

// model PlatformLink {
//   id String @id @default(uuid())

//   title    String
//   url      String
//   position Int

//   project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   projectId String?  @map("project_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("platform_links")
// }

// model Specialization {
//   id String @id @default(uuid())

//   title String
//   route RouteSpecializationType @default(OTHER) @map("route")

//   users User[]

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("specializations")
// }

// model Follow {
//   id String @id @default(uuid())

//   follower   User   @relation(name: "followers", fields: [followerId], references: [id], onDelete: Cascade)
//   followerId String @map("follower_id")

//   following   User   @relation(name: "followings", fields: [followingId], references: [id], onDelete: Cascade)
//   followingId String @map("following_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@unique([followerId, followingId])
//   @@index([followerId])
//   @@index([followingId])
//   @@map("follows")
// }

// model Project {
//   id String @id @default(uuid())

//   title         String
//   images        String[]
//   genres        String[]
//   description   String
//   contentBlocks Json?    @map("content_blocks")

//   author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   authorId String @map("author_id")

//   topic   Topic  @relation(name: "project_topic")
//   topicId String @map("topic_id")

//   isGathering Boolean @default(false) @map("is_gathering")
//   slug        String  @unique

//   platforms PlatformLink[]
//   comments  Comment[]

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
// }

// model Category {
//   id String @id @default(uuid())

//   title    String
//   slug     String @unique
//   position Int

//   subcategories Subcategory[] @relation("subcategories")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("categories")
// }

// model Subcategory {
//   id String @id @default(uuid())

//   title    String
//   slug     String @unique
//   position Int

//   topics Topic[] @relation("subcategory_topics")

//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   categoryId String   @map("category_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("subcategories")
// }

// model Topic {
//   id String @id @default(uuid())

//   title String
//   slug  String @unique

//   attachedProject   Project? @relation(name: "project_topic", fields: [attachedProjectId], references: [id])
//   attachedProjectId String?  @map("attached_project_id")

//   subcategory   Subcategory @relation("subcategory_topics", fields: [subcategoryId], references: [id], onDelete: Cascade)
//   subcategoryId String      @map("subcategory_id")

//   author User   @relation("user_topics", fields: [userId], references: [id])
//   userId String @map("user_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("topics")
// }

// model Comment {
//   id       String @id @default(uuid())
//   content  String
//   author   User   @relation(fields: [authorId], references: [id])
//   authorId String @map("author_id")

//   targetContentType TargetContentType
//   targetId          String            @map("target_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("comments")
// }

// model Bookmark {
//   id String @id @default(uuid())

//   user   User   @relation(fields: [userId], references: [id])
//   userId String @map("user_id")

//   targetContentType TargetContentType
//   targetId          String            @map("target_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@unique([userId, targetContentType, targetId])
//   @@map("bookmarks")
// }

// model View {
//   id       String  @id @default(uuid())
//   viewer   User?   @relation(name: "user_views", fields: [viewerId], references: [id])
//   viewerId String? @map("viewer_id")

//   targetContentType TargetContentType
//   targetId          String            @map("target_id")

//   createdAt DateTime @default(now()) @map("created_at")

//   @@unique([viewerId, targetContentType, targetId])
//   @@map("views")
// }

// // model Notification {
// //   id String @id @default(uuid())

// //   message String
// //   type    NotificationType
// //   isRead  Boolean          @default(false) @map("is_read")

// //   user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
// //   userId String? @map("user_id")

// //   createdAt DateTime @default(now()) @map("created_at")
// //   updatedAt DateTime @updatedAt @map("updated_at")

// //   @@map("notifications")
// // }

// // model NotificationSettings {
// //   id String @id @default(uuid())

// //   siteNotifications     Boolean @default(true) @map("site_notifications")
// //   emailNotifications    Boolean @default(true) @map("email_notifications")
// //   telegramNotifications Boolean @default(true) @map("telegram_notifications")

// //   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
// //   userId String @unique @map("user_id")

// //   createdAt DateTime @default(now()) @map("created_at")
// //   updatedAt DateTime @updatedAt @map("updated_at")

// //   @@map("notification_settings")
// // }

// model UserLastOpened {
//   id     String @id @default(uuid())
//   user   User   @relation(name: "user_last_opened", fields: [userId], references: [id])
//   userId String @map("user_id")

//   targetContentType TargetContentType
//   targetId          String            @map("target_id")

//   lastOpenedAt DateTime @default(now()) @map("last_opened_at")

//   @@unique([userId, targetContentType, targetId])
//   @@map("user_last_opened")
// }

// model Token {
//   id String @id @default(uuid())

//   token     String    @unique
//   type      TokenType
//   expiresIn DateTime  @map("expires_in")

//   user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String? @map("user_id")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("tokens")
// }

// enum TokenType {
//   EMAIL_VERIFY
//   PASSWORD_RESET
//   DEACTIVATE_ACCOUNT
//   TELEGRAM_AUTH

//   @@map("token_types")
// }

// enum TargetContentType {
//   PROJECT
//   TOPIC
//   CANDIDATE_CARD

//   @@map("target_content_types")
// }

// enum StatusTeamType {
//   FINDING
//   GATHERING

//   @@map("status_team_types")
// }

// enum RouteSpecializationType {
//   ART
//   DEVELOPER
//   MANAGER
//   OTHER
// }

// // enum NotificationType {
// //   NEW_SPONSORSHIP
// //   ENABLE_TWO_FACTOR

// //   @@map("notification_types")
// // }

// enum RoleType {
//   ADMIN
//   MODERATOR
//   USER

//   @@map("role_types")
// }
